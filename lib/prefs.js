let { Cc, Ci } = require("chrome");
let prompts = Cc["@mozilla.org/embedcomp/prompt-service;1"].getService(Ci.nsIPromptService);
let prefs = require("sdk/simple-prefs");
let Util = require("lib/util");

/**
 * Preference manager
 * @constructor
 */
let Prefs = function(){
    this.frame = null;
    this.frame_url = "";
    this.db = null;
};

/**
 * Initialize preference.
 * @param {Object} frame - Must be the result of require("sdk/ui/frame").Frame({})
 * @param {string} frame_url - Url of the frame
 * @param {Object} sidebar - Instance of require("lib/sidebar")
 * @param {Object} tooltip - Instance of require("lib/tooltip")
 * @param {Object} db - Must be the instance generated by require("lib/db").
 */
Prefs.prototype.init = function(frame, frame_url, sidebar, tooltip, db){
    if( ! (frame && frame_url && sidebar && tooltip && db) ){
        throw new Error("Insufficient parameter");
    }

    this.frame = frame;
    this.frame_url = frame_url;
    this.sidebar = sidebar;
    this.tooltip = tooltip;
    this.db = db;

    // Set font size for tooltip/sidebar
    this.sidebar.setFontSize(prefs.prefs["font_size"]);
    this.tooltip.setFontSize(prefs.prefs["font_size"]);

    prefs.on("save_search_history", function(pref_name){
        let msg = {};
        if(prefs.prefs[pref_name]){
            msg.type = "show_history_button";
        }
        else{
            msg.type = "hide_history_button";
            if (prompts.confirm(null, "確認", "現在までの検索履歴を削除しますか？ (取消できません)")) { // "Confirmation", "Do you want to delete search history? (You cannot undo this operation)"
                this.db.clear();
            }
        }
        this.frame.postMessage(JSON.stringify(msg), this.frame_url);
    }.bind(this));

    prefs.on("show_result_with_history", function(){
        prefs.prefs["display_target"] = "sidebar";
    }.bind(this));

    prefs.on("panel_position", function(){
        prefs.prefs["display_target"] = "panel";
    }.bind(this));

    prefs.on("always_open_new_tab", function(){
        prefs.prefs["display_target"] = "tab";
    }.bind(this));

    prefs.on("service_name", function(){
        let msg = {
            type: "update-placeholder",
            data: prefs.prefs["service_name"] + "で検索"
        };
        this.frame.postMessage(JSON.stringify(msg), this.frame_url);
    }.bind(this));

    prefs.on("service_url", function(){
    }.bind(this));

    prefs.on("service_selector", function(){
    }.bind(this));

    // Modification of default setting from v0.0.1. after v0.0.1, ... > li:first will not work.
    if(prefs.prefs["service_selector"] === "#resultsList > ul > li:first"){
        prefs.prefs["service_selector"] = "#resultsList > ul > li:first-child";
    }

    prefs.on("clear_history", function(){
        if (prompts.confirm(null, "警告", "全ての履歴が削除され、元に戻せませんがよろしいですか？")) { // "Caution", "All histories will be deleted and never set back. Are you sure to delete?"
            this.db.clear();
        }
    }.bind(this));

    prefs.on("export_history", function(){
        Util.exportFormattedDataToFile(this.db);
    }.bind(this));

    prefs.on("dump_history", function(){
        Util.exportDumpToFile(this.db);
    }.bind(this));

    prefs.on("font_size", (pref_name) => {
        this.sidebar.setFontSize(prefs.prefs[pref_name]);
        this.tooltip.setFontSize(prefs.prefs[pref_name]);
    });
};

/**
 * Return preference value by its name
 * @param {string} name - Preference name
 * @returns {*}
 */
Prefs.prototype.get = function(name){
    return prefs.prefs[name];
};

module.exports = Prefs;
